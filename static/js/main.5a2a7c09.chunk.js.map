{"version":3,"sources":["common/index.js","components/Sidebar/index.js","store/actions/getApiDataAction.js","store/actions/actionTypes.js","store/actions/selectedCountryAction.js","components/MainContent/CountryInfoCard/index.js","components/MainContent/Charts/PieChart/index.js","components/MainContent/Charts/LineChart/index.js","components/MainContent/index.js","App.js","serviceWorker.js","store/reducers/getApiDataReducer.js","store/reducers/selectedCountryReducer.js","store/reducers/index.js","store/sagas/getApiDataSaga.js","store/sagas/rootSaga.js","store/index.js","index.js"],"names":["roundNumber","number","undefined","toString","replace","formatDate","timestamp","year","slice","day","month","formatTime","hour","minute","second","sortDataByDate","categoryData","history","sortedData","Object","keys","map","key","date","sort","a","b","Date","sortedDates","values","sortedNumbers","connect","state","error","apiData","data","numberOfConfirmed","numberOfDeaths","numberOfRecovered","numberOfCurrentlySick","lastUpdated","lastUpdatedDate","lastUpdatedTime","countryConfirmedDataSum","countryDeathsDataSum","countryRecoveredDataSum","dispatch","getApiData","type","selectedCountryDispatchToStore","country","selectedCountry","selectedCountryAction","props","useState","countryList","setCountryList","useEffect","className","style","color","id","title","placeholder","autoFocus","onChange","e","inputValue","target","value","toLowerCase","filterList","filter","includes","i","src","country_code","alt","onClick","console","log","latest","CountryInfoCard","cardText","cardNumber","totalNumber","cardName","margin","totalValue","toFixed","PieChart","pieData","labels","datasets","backgroundColor","hoverBackgroundColor","currentlySick","deaths","recovered","options","display","text","fontSize","fontColor","fontStyle","legend","position","width","height","LineChart","lineData","fill","lineTension","borderColor","borderWidth","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","scales","yAxes","ticks","beginAtZero","precision","confirmed","sortedConfirmedHistoryDates","sortedConfirmedHistoryNumbers","sortedDeathsHistoryDates","sortedDeathsHistoryNumbers","sortedRecoveredHistoryDates","sortedRecoveredHistoryNumbers","inTheLast24h","locations","find","sortedConfirmedData","sortedDeathsData","sortedRecoveredData","length","verticalAlign","marginRight","App","Boolean","window","location","hostname","match","getApiDataReducer","action","newState","last_updated","selectedCountryReducer","combineReducers","getApiDataWatcher","getSumData","res","propertyName","combineData","reduce","prev","curr","count","get","set","Map","parseFloat","fetch","then","json","catch","put","takeLatest","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5a2a7c09.chunk.js","sourcesContent":["export const roundNumber = (number) => {\r\n  if (number !== undefined) return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n};\r\n\r\nexport const formatDate = timestamp => {\r\n  if (timestamp !== undefined) {\r\n    const year = timestamp.slice(0, 4);\r\n    const day = timestamp.slice(5, 7);\r\n    const month = timestamp.slice(8, 10);\r\n\r\n    return `${day}/${month}/${year}`;\r\n  }\r\n};\r\n\r\nexport const formatTime = timestamp => {\r\n  if (timestamp !== undefined) {\r\n    const hour = timestamp.slice(11, 13);\r\n    const minute = timestamp.slice(14, 16);\r\n    const second = timestamp.slice(17, 19);\r\n\r\n    return `${hour}:${minute}:${second}`;\r\n  }\r\n};\r\n\r\nexport const sortDataByDate = (categoryData) => {\r\n  if (categoryData.history !== undefined) {\r\n    let sortedData = Object.keys(categoryData.history).map(key => ({date: key, number: categoryData.history[key]}));\r\n    sortedData = sortedData.sort((a,b)=> new Date(a.date) - new Date(b.date));\r\n    sortedData = Object.values(sortedData);\r\n\r\n    const sortedDates = sortedData.map(a => a.date);\r\n    const sortedNumbers = sortedData.map(a => a.number);\r\n\r\n    return [sortedData, sortedDates, sortedNumbers];\r\n  }\r\n};\r\n\r\n\r\nexport const calculatePercentage = (totalValue, partialValue) => {\r\n  return ((100 * partialValue) / totalValue).toFixed(2) + '%';\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getApiDataAction, selectedCountryAction } from '../../store/actions';\r\nimport { roundNumber, formatDate, formatTime } from '../../common';\r\n\r\nimport '../../styles/_style.scss';\r\nimport './style.scss';\r\n\r\nconst Sidebar = (props) => {\r\n  const [countryList, setCountryList] = useState();\r\n  const { getApiData } = props;\r\n\r\n  useEffect(() => {\r\n    getApiData();\r\n  }, [getApiData]);\r\n\r\n  // setting initial country list - resolved redux saga and useEffect infinite loop\r\n  if (props.countryConfirmedDataSum && countryList === undefined) {\r\n    setCountryList(props.countryConfirmedDataSum);\r\n  }\r\n\r\n  const handleInputOnChange = (e) => {\r\n    const inputValue = e.target.value.toLowerCase();\r\n    const filterList = props.countryConfirmedDataSum.filter(country => \r\n      country.country.toLowerCase().includes(inputValue)\r\n    );\r\n    setCountryList(filterList);\r\n  };\r\n\r\n  const handleSelectCountry = (selectedCountry) => () => {\r\n    console.log('selected country', selectedCountry);\r\n    props.selectedCountryDispatchToStore(selectedCountry);\r\n  };\r\n\r\n  return (\r\n    <div className='col sidebar'>\r\n      <div className='sum-data'>\r\n        <h2>Corona Virus Statistics</h2>\r\n        {props.error ? <p style={{ color: '#e60036' }}>{props.error}</p> : null}\r\n        <div className='cards-row'>\r\n          <p className='card confirmed'>\r\n            <span>{props.numberOfConfirmed}</span> confirmed\r\n          </p>\r\n          <p className='card deaths'>\r\n            <span>{props.numberOfDeaths}</span> deaths\r\n          </p>\r\n        </div>\r\n        <div className='cards-row'>\r\n          <p className='card recovered'>\r\n            <span>{props.numberOfRecovered}</span> recovered\r\n          </p>\r\n          <p className='card currently-sick'>\r\n            <span>{props.numberOfCurrentlySick}</span> currently sick\r\n          </p>\r\n        </div>\r\n        {props.lastUpdatedDate && props.lastUpdatedTime ?\r\n          <p>Last update <span id='last-updated-date' title='DD/MM/YYYY'>{props.lastUpdatedDate}</span> in <span id='last-updated-time' title='HH/MM/SS'>{props.lastUpdatedTime}</span>\r\n          .</p>\r\n          :\r\n          null\r\n        }\r\n      </div>\r\n      <div className='input-search'>\r\n        <input placeholder='Type country name...' autoFocus onChange={handleInputOnChange} />\r\n      </div>\r\n      <div className='country-list'>\r\n        {countryList && countryList.map((country, i) => {\r\n          return (\r\n            <div key={i} className='country-row'>\r\n              <img\r\n                src={`https://www.countryflags.io/${country.country_code}/flat/32.png`}\r\n                alt={country.country_code}\r\n              />\r\n              <p onClick={handleSelectCountry(country)}>\r\n                <strong>{country.country}</strong> | <span className='numbers'>{roundNumber(country.latest)}</span>\r\n              </p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    error: state.apiData.error,\r\n    data: state.apiData.data,\r\n    numberOfConfirmed: roundNumber(state.apiData.numberOfConfirmed),\r\n    numberOfDeaths: roundNumber(state.apiData.numberOfDeaths),\r\n    numberOfRecovered: roundNumber(state.apiData.numberOfRecovered),\r\n    numberOfCurrentlySick: roundNumber(state.apiData.numberOfCurrentlySick),\r\n    lastUpdated: state.apiData.lastUpdated,\r\n    lastUpdatedDate: formatDate(state.apiData.lastUpdated),\r\n    lastUpdatedTime: formatTime(state.apiData.lastUpdated),\r\n    countryConfirmedDataSum: state.apiData.countryConfirmedDataSum,\r\n    countryDeathsDataSum: state.apiData.countryDeathsDataSum,\r\n    countryRecoveredDataSum: state.apiData.countryRecoveredDataSum\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getApiData: () => dispatch(getApiDataAction()),\r\n    selectedCountryDispatchToStore: (country) => dispatch(selectedCountryAction(country))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\r\n","import { GET_API_DATA_REQUEST } from './actionTypes';\r\n\r\nexport const getApiDataAction = () => ({\r\n  type: GET_API_DATA_REQUEST\r\n});\r\n","/* eslint-disable no-unused-vars */\r\nexport const GET_API_DATA_REQUEST = 'GET_API_DATA_REQUEST';\r\nexport const GET_API_DATA_SUCCESS = 'GET_API_DATA_SUCCESS';\r\nexport const GET_API_DATA_ERROR = 'GET_API_DATA_ERROR';\r\nexport const SELECTED_COUNTRY = 'SELECTED_COUNTRY';\r\n","import { SELECTED_COUNTRY } from './actionTypes';\r\n\r\nexport const selectedCountryAction = (country) => ({\r\n  type: SELECTED_COUNTRY,\r\n  selectedCountry: country\r\n});\r\n","import React from 'react';\r\n\r\nimport {\r\n  roundNumber,\r\n  calculatePercentage\r\n} from '../../../common';\r\n\r\nconst CountryInfoCard = (props) => {\r\n  return (\r\n    <p className='country-card'>\r\n      <span className='country-card-number'>\r\n        {props.cardText.includes('24h') ? '+' : null}{roundNumber(props.cardNumber)}\r\n        {props.totalNumber ? \r\n          <span className='percentage'>\r\n            (\r\n            <span className={`${props.cardName}-color`} style={{ margin: '0 2px' }}>\r\n              {props.cardText.includes('24h') ? '+' : null}\r\n              {calculatePercentage(props.totalNumber, props.cardNumber)}\r\n            </span>\r\n            )\r\n          </span>\r\n          :\r\n          null\r\n        }\r\n      </span>\r\n      {props.cardText}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default CountryInfoCard;\r\n","import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nconst PieChart = (props) => {\r\n\r\n  const pieData = {\r\n    labels: props.labels,\r\n    datasets: [\r\n      {\r\n        backgroundColor: ['#3333ff', '#571aab', '#4fc974'],\r\n        hoverBackgroundColor: ['#0000cc', '#2d0d59', '#2a8946'],\r\n        data: [\r\n          props.data.currentlySick ? props.data.currentlySick : null,\r\n          props.data.deaths ? props.data.deaths.latest : null,\r\n          props.data.recovered ? props.data.recovered.latest : null\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: props.title,\r\n      fontSize: 20,\r\n      fontColor: '#ccc',\r\n      fontStyle: 'normal'\r\n    },\r\n    legend: {\r\n      display: true,\r\n      position: 'top'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Pie\r\n      data={pieData}\r\n      width={40}\r\n      height={10}\r\n      options={options}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst LineChart = (props) => {\r\n\r\n  const lineData = {\r\n    labels: props.labels,\r\n    datasets: [\r\n      {\r\n        fill: true,\r\n        lineTension: 0.5,\r\n        backgroundColor: props.backgroundColor,\r\n        borderColor: props.borderColor,\r\n        borderWidth: 3,\r\n        pointBorderWidth: 4,\r\n        pointHoverRadius: 8,\r\n        pointHoverBackgroundColor: props.borderColor,\r\n        data: props.data\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: props.title,\r\n      fontSize: 20,\r\n      fontColor: '#ccc',\r\n      fontStyle: 'normal'\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    scales: {\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero: true,\r\n          precision: 0\r\n        }\r\n      }]\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Line\r\n      data={lineData}\r\n      width={40}\r\n      height={10}\r\n      options={options}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  roundNumber,\r\n  sortDataByDate\r\n} from '../../common';\r\n\r\nimport CountryInfoCard from './CountryInfoCard';\r\nimport PieChart from './Charts/PieChart';\r\nimport LineChart from './Charts/LineChart';\r\n\r\nimport '../../styles/_style.scss';\r\nimport './style.scss';\r\n\r\nconst MainContent = (props) => {\r\n\r\n  let confirmed,\r\n    deaths,\r\n    recovered,\r\n    currentlySick,\r\n    sortedConfirmedHistoryDates,\r\n    sortedConfirmedHistoryNumbers,\r\n    sortedDeathsHistoryDates,\r\n    sortedDeathsHistoryNumbers,\r\n    sortedRecoveredHistoryDates,\r\n    sortedRecoveredHistoryNumbers,\r\n    inTheLast24h;\r\n\r\n  if (props.country) {\r\n    confirmed = props.data.confirmed.locations.find(country => country.country === props.country);\r\n    deaths = props.data.deaths.locations.find(country => country.country === props.country);\r\n    recovered = props.data.recovered.locations.find(country => country.country === props.country);\r\n    currentlySick = confirmed.latest - deaths.latest - recovered.latest;\r\n\r\n    const sortedConfirmedData = sortDataByDate(confirmed);\r\n    sortedConfirmedHistoryDates = sortedConfirmedData[1];\r\n    sortedConfirmedHistoryNumbers = sortedConfirmedData[2];\r\n\r\n    const sortedDeathsData = sortDataByDate(deaths);\r\n    sortedDeathsHistoryDates = sortedDeathsData[1];\r\n    sortedDeathsHistoryNumbers = sortedDeathsData[2];\r\n\r\n    const sortedRecoveredData = sortDataByDate(recovered);\r\n    sortedRecoveredHistoryDates = sortedRecoveredData[1];\r\n    sortedRecoveredHistoryNumbers = sortedRecoveredData[2];\r\n\r\n    inTheLast24h = sortedConfirmedHistoryNumbers[sortedConfirmedHistoryNumbers.length - 1] - sortedConfirmedHistoryNumbers[sortedConfirmedHistoryNumbers.length - 2];\r\n  }\r\n\r\n  const DefaultMessages = () => {\r\n    if (props.selectedCountry.latest === 0) {\r\n      return <p className='text-in-center'>No data available</p>;\r\n    }\r\n    \r\n    if (!props.selectedCountry.country) {\r\n      return <p className='text-in-center'>Select country from the country list</p>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='col main-content'>\r\n      {props.country ?  \r\n        <>\r\n          {props.selectedCountry.country_code ? \r\n            <img\r\n              style={{ verticalAlign: 'sub', marginRight: '20px' }}\r\n              src={`https://www.countryflags.io/${props.selectedCountry.country_code}/flat/32.png`}\r\n              alt={props.selectedCountry.country_code}\r\n            />\r\n            : null\r\n          }\r\n          <h1 style={{ display: 'inline-block' }}>{props.country}</h1>\r\n        </>\r\n        : null\r\n      }\r\n      {props.selectedCountry && props.country && props.selectedCountry.latest !== 0 ? \r\n        <div className='info'>\r\n          <CountryInfoCard\r\n            cardNumber={confirmed.latest}\r\n            cardText='Total cases'\r\n          />\r\n          <CountryInfoCard\r\n            cardName='confirmed'\r\n            cardNumber={inTheLast24h}\r\n            cardText='in the last 24h'\r\n            totalNumber={confirmed.latest}\r\n          />\r\n          <CountryInfoCard\r\n            cardName='deaths'\r\n            cardNumber={deaths.latest}\r\n            cardText='Deaths'\r\n            totalNumber={confirmed.latest}\r\n          />\r\n          <CountryInfoCard\r\n            cardName='recovered'\r\n            cardNumber={recovered.latest}\r\n            cardText='Recovered'\r\n            totalNumber={confirmed.latest}\r\n          />\r\n          <CountryInfoCard\r\n            cardName='currently-sick'\r\n            cardNumber={currentlySick}\r\n            cardText='Currently sick'\r\n            totalNumber={confirmed.latest}\r\n          />\r\n        </div>\r\n        :\r\n        <DefaultMessages />\r\n      }\r\n\r\n      {confirmed && deaths && recovered && props.selectedCountry.latest !== 0 ?\r\n        <>\r\n          <PieChart\r\n            labels={['Currently sick', 'Deaths', 'Recovered']}\r\n            data={{currentlySick, deaths, recovered}}\r\n            title='Total data'\r\n          />\r\n\r\n          <LineChart\r\n            labels={sortedConfirmedHistoryDates}\r\n            data={sortedConfirmedHistoryNumbers}\r\n            title='Total cases per day'\r\n            borderColor='#e60036'\r\n            backgroundColor='rgba(230, 0, 54, 0.4)'\r\n          />\r\n\r\n          <LineChart\r\n            labels={sortedDeathsHistoryDates}\r\n            data={sortedDeathsHistoryNumbers}\r\n            title='Total deaths per day'\r\n            borderColor='#571aab'\r\n            backgroundColor='rgb(87, 26, 171, 0.4)'\r\n          />\r\n\r\n          <LineChart\r\n            labels={sortedRecoveredHistoryDates}\r\n            data={sortedRecoveredHistoryNumbers}\r\n            title='Total recovered per day'\r\n            borderColor='#4fc974'\r\n            backgroundColor='rgb(79, 201, 116, 0.4)'\r\n          />\r\n        </> : null }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.apiData.data,\r\n    selectedCountry: state.selectedCountry,\r\n    country: state.selectedCountry.country,\r\n    latest: roundNumber(state.selectedCountry.latest)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(MainContent);\r\n","import React from 'react';\r\n\r\nimport Sidebar from './components/Sidebar';\r\nimport MainContent from './components/MainContent';\r\n\r\nimport './styles/_style.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='flex-grid'>\r\n      <Sidebar />\r\n      <MainContent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_API_DATA_SUCCESS, GET_API_DATA_ERROR } from '../actions/actionTypes';\r\n\r\nconst getApiDataReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n  if (action.type === GET_API_DATA_SUCCESS) {\r\n    return {\r\n      ...newState,\r\n      data: action.data[0],\r\n      numberOfConfirmed: action.data[0].latest.confirmed,\r\n      numberOfDeaths: action.data[0].latest.deaths,\r\n      numberOfRecovered: action.data[0].latest.recovered,\r\n      numberOfCurrentlySick: (action.data[0].latest.confirmed - action.data[0].latest.recovered),\r\n      lastUpdated: action.data[0].confirmed.last_updated,\r\n      countryConfirmedDataSum: action.data[1][0].countryConfirmedDataSum,\r\n      countryDeathsDataSum: action.data[1][0].countryDeathsDataSum,\r\n      countryRecoveredDataSum: action.data[1][0].countryRecoveredDataSum\r\n    };\r\n  } else if (action.type === GET_API_DATA_ERROR) {\r\n    return {\r\n      ...newState,\r\n      error: action.error\r\n    };\r\n  } else {\r\n    return newState;\r\n  }\r\n};\r\n\r\nexport default getApiDataReducer;\r\n","import { SELECTED_COUNTRY } from '../actions/actionTypes';\r\n\r\nconst selectedCountryReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n  if (action.type === SELECTED_COUNTRY) {\r\n    return {\r\n      ...newState,\r\n      country: action.selectedCountry.country,\r\n      latest: action.selectedCountry.latest,\r\n      country_code: action.selectedCountry.country_code\r\n    };\r\n  } else {\r\n    return newState;\r\n  }\r\n};\r\n\r\nexport default selectedCountryReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport getApiDataReducer from './getApiDataReducer';\r\nimport selectedCountryReducer from './selectedCountryReducer';\r\n\r\nexport default combineReducers({\r\n  apiData: getApiDataReducer,\r\n  selectedCountry: selectedCountryReducer\r\n});\r\n","import { put, takeLatest } from 'redux-saga/effects';\r\nimport { GET_API_DATA_REQUEST, GET_API_DATA_SUCCESS, GET_API_DATA_ERROR } from '../actions/actionTypes';\r\n\r\nfunction getSumData(res, propertyName) {\r\n  let data;\r\n  if (propertyName === 'confirmed') data = res.confirmed.locations;\r\n  if (propertyName === 'deaths') data = res.deaths.locations;\r\n  if (propertyName === 'recovered') data = res.recovered.locations;\r\n\r\n  const combineData = data.reduce((prev, curr) => {\r\n    const count = prev.get(curr.country) || 0;\r\n    prev.set(`${curr.country} ${curr.country_code}`, curr.latest + count, curr.country_code);\r\n    return prev;\r\n  }, new Map());\r\n\r\n  const combineDataSum = [...combineData].map(([country, latest]) => {\r\n    return {\r\n      country: country.slice(0, -3),\r\n      latest,\r\n      country_code: country.slice(-2)};\r\n  });\r\n\r\n  const sortCombinedData = combineDataSum.sort((a, b) => parseFloat(b.latest) - parseFloat(a.latest));\r\n\r\n  return sortCombinedData;\r\n}\r\n\r\nfunction* getApiData() {\r\n  try {\r\n    const data = yield fetch('https://coronavirus-tracker-api.herokuapp.com/all')\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        console.log('data', res);\r\n\r\n        const countryConfirmedDataSum = getSumData(res, 'confirmed');\r\n        const countryDeathsDataSum = getSumData(res, 'deaths');\r\n        const countryRecoveredDataSum = getSumData(res, 'recovered');\r\n\r\n        const sumData = [{\r\n          countryConfirmedDataSum,\r\n          countryDeathsDataSum,\r\n          countryRecoveredDataSum\r\n        }];\r\n\r\n        return [res, sumData];\r\n      })\r\n      .catch(e => console.log(e));\r\n\r\n    yield put({ type: GET_API_DATA_SUCCESS, data });\r\n  } catch (e) {\r\n    console.log('getApiData saga Error: ', e);\r\n    yield put({ type: GET_API_DATA_ERROR, error: 'Something went wrong while retrieving API data.' });\r\n  }\r\n}\r\n\r\nexport function* getApiDataWatcher() {\r\n  yield takeLatest(GET_API_DATA_REQUEST, getApiData);\r\n}\r\n","import { all, fork } from 'redux-saga/effects';\r\n\r\nimport { getApiDataWatcher } from './getApiDataSaga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(getApiDataWatcher)\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from './reducers';\r\nimport rootSaga from './sagas/rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  compose(\r\n    applyMiddleware(sagaMiddleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n      : f => f\r\n  )\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}