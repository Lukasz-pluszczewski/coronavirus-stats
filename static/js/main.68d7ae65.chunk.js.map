{"version":3,"sources":["common/index.js","components/Sidebar/index.js","store/actions/getApiDataAction.js","store/actions/actionTypes.js","store/actions/selectedCountryAction.js","store/actions/getSelectedCountryPopulationAction.js","components/MainContent/CountryInfoCard/index.js","components/MainContent/Charts/PieChart/index.js","components/MainContent/Charts/LineChart/index.js","components/MainContent/Charts/BarChart/index.js","components/MainContent/Credits/index.js","components/MainContent/index.js","App.js","serviceWorker.js","store/reducers/getApiDataReducer.js","store/reducers/selectedCountryReducer.js","store/reducers/getSelectedCountryPopulationReducer.js","store/reducers/index.js","store/sagas/getApiDataSaga.js","store/sagas/getSelectedCountryPopulationSaga.js","store/sagas/rootSaga.js","store/index.js","index.js"],"names":["roundNumber","number","undefined","toString","replace","formatDate","timestamp","year","slice","day","month","formatTime","hour","minute","second","sortDataByDate","categoryData","history","sortedData","Object","keys","map","key","date","sort","a","b","Date","sortedDates","values","sortedNumbers","calculatePercentage","totalValue","partialValue","toFixed","connect","state","error","apiData","data","numberOfConfirmed","numberOfDeaths","numberOfRecovered","numberOfCurrentlySick","lastUpdated","lastUpdatedDate","lastUpdatedTime","countryConfirmedDataSum","countryDeathsDataSum","countryRecoveredDataSum","dispatch","getApiData","type","selectedCountryDispatchToStore","country","selectedCountry","selectedCountryAction","getSelectedCountryPopulation","country_code","selectedCountryCode","getSelectedCountryPopulationAction","props","useState","countryList","setCountryList","useEffect","className","style","color","confirmed","latest","deaths","recovered","id","title","placeholder","autoFocus","onChange","e","inputValue","target","value","toLowerCase","filterList","filter","includes","i","onClick","console","log","test","navigator","userAgent","scroller","scrollTo","duration","smooth","offset","src","alt","CountryInfoCard","last24Hours","cardText","cardNumber","totalNumber","percentageDescription","cardName","margin","smallText","PieChart","pieData","labels","datasets","backgroundColor","hoverBackgroundColor","currentlySick","options","display","text","fontSize","fontColor","fontStyle","legend","position","noData","length","width","height","LineChart","lineData","fill","lineTension","borderColor","borderWidth","pointRadius","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","scales","yAxes","ticks","beginAtZero","precision","BarChart","hoverBorderColor","Credits","data-tip","data-event","globalEventOff","place","effect","clickable","href","rel","selectedCountryPopulation","countryPopulation","sortedConfirmedHistoryDates","sortedConfirmedHistoryNumbers","sortedDeathsHistoryDates","sortedDeathsHistoryNumbers","sortedRecoveredHistoryDates","sortedRecoveredHistoryNumbers","newTotalCasesLast24h","deathsLast24h","recoveredLast24h","dailyCases","array","locations","find","sortedConfirmedData","sortedDeathsData","sortedRecoveredData","n","name","verticalAlign","marginRight","App","Boolean","window","location","hostname","match","getApiDataReducer","action","newState","last_updated","selectedCountryReducer","getSelectedCountryPopulationReducer","country_population","combineReducers","getApiDataWatcher","getSumData","res","propertyName","reduce","countries","province","existing","push","parseFloat","fetch","then","json","catch","put","takeLatest","getSelectedCountryPopulationData","getSelectedCountryPopulationDataWatcher","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","run","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.68d7ae65.chunk.js","sourcesContent":["export const roundNumber = (number) => {\r\n  if (number !== undefined) return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n};\r\n\r\nexport const formatDate = timestamp => {\r\n  if (timestamp !== undefined) {\r\n    const year = timestamp.slice(0, 4);\r\n    const day = timestamp.slice(5, 7);\r\n    const month = timestamp.slice(8, 10);\r\n\r\n    return `${day}/${month}/${year}`;\r\n  }\r\n};\r\n\r\nexport const formatTime = timestamp => {\r\n  if (timestamp !== undefined) {\r\n    const hour = timestamp.slice(11, 13);\r\n    const minute = timestamp.slice(14, 16);\r\n    const second = timestamp.slice(17, 19);\r\n\r\n    return `${hour}:${minute}:${second}`;\r\n  }\r\n};\r\n\r\nexport const sortDataByDate = (categoryData) => {\r\n  if (categoryData.history !== undefined) {\r\n    let sortedData = Object.keys(categoryData.history).map(key => ({date: key, number: categoryData.history[key]}));\r\n    sortedData = sortedData.sort((a,b)=> new Date(a.date) - new Date(b.date));\r\n    sortedData = Object.values(sortedData);\r\n\r\n    const sortedDates = sortedData.map(a => a.date);\r\n    const sortedNumbers = sortedData.map(a => a.number);\r\n\r\n    return [sortedData, sortedDates, sortedNumbers];\r\n  }\r\n};\r\n\r\n\r\nexport const calculatePercentage = (totalValue, partialValue, toFixed) => {\r\n  return ((100 * partialValue) / totalValue).toFixed(toFixed) + '%';\r\n};\r\n\r\nexport const substractNumberWithPreviousNumberInArray = array => {\r\n  return array.map((n, i) => {\r\n    const itertator = i - 1;\r\n    return n - array[itertator];\r\n  });\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { Link, Element , Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\r\n\r\nimport { getApiDataAction, selectedCountryAction, getSelectedCountryPopulationAction } from '../../store/actions';\r\nimport { roundNumber, formatDate, formatTime } from '../../common';\r\n\r\nimport '../../styles/_style.scss';\r\nimport './style.scss';\r\n\r\nconst Sidebar = (props) => {\r\n  const [countryList, setCountryList] = useState();\r\n  const { getApiData } = props;\r\n\r\n  useEffect(() => {\r\n    getApiData();\r\n  }, [getApiData]);\r\n\r\n  // setting initial country list - resolved redux saga and useEffect infinite loop\r\n  if (props.countryConfirmedDataSum && countryList === undefined) {\r\n    setCountryList(props.countryConfirmedDataSum);\r\n  }\r\n\r\n  const handleInputOnChange = (e) => {\r\n    const inputValue = e.target.value.toLowerCase();\r\n    const filterList = props.countryConfirmedDataSum.filter(country => \r\n      country.country.toLowerCase().includes(inputValue)\r\n    );\r\n    setCountryList(filterList);\r\n  };\r\n\r\n  const handleSelectCountry = (selectedCountry) => () => {\r\n    console.log('selected country', selectedCountry);\r\n    props.getSelectedCountryPopulation(selectedCountry.country_code);\r\n    props.selectedCountryDispatchToStore(selectedCountry);\r\n\r\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {\r\n      scroller.scrollTo('main-content', {\r\n        duration: 1000,\r\n        smooth: true,\r\n        offset: 50\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='col sidebar'>\r\n      <div className='sum-data'>\r\n        <h2>Corona Virus Statistics</h2>\r\n        {props.error ? <p style={{ color: '#e60036' }}>{props.error}</p> : null}\r\n        <div className='cards-row'>\r\n          <p className='card confirmed'>\r\n            {props.data && props.data.confirmed.latest !== 0 ? <span>{props.numberOfConfirmed}</span> : <span>No data</span> } confirmed\r\n          </p>\r\n          <p className='card deaths'>\r\n            {props.data && props.data.deaths.latest !== 0 ? <span>{props.numberOfDeaths}</span> : <span>No data</span> } deaths\r\n          </p>\r\n        </div>\r\n        <div className='cards-row'>\r\n          <p className='card recovered'>\r\n            {props.data && props.data.recovered.latest !== 0 ? <span>{props.numberOfRecovered}</span> : <span>No data</span> } recovered\r\n          </p>\r\n          <p className='card currently-sick'>\r\n            {props.data && props.numberOfCurrentlySick !== 0 ? <span>{props.numberOfCurrentlySick}</span> : <span>No data</span> } currently sick\r\n          </p>\r\n        </div>\r\n        {props.lastUpdatedDate && props.lastUpdatedTime ?\r\n          <p>Last update <span id='last-updated-date' title='DD/MM/YYYY'>{props.lastUpdatedDate}</span> in <span id='last-updated-time' title='HH/MM/SS'>{props.lastUpdatedTime}</span>\r\n          .</p>\r\n          :\r\n          null\r\n        }\r\n      </div>\r\n      <div className='input-search'>\r\n        <input placeholder='Type country name...' autoFocus onChange={handleInputOnChange} />\r\n      </div>\r\n      <div className='country-list'>\r\n        {countryList && countryList.map((country, i) => {\r\n          return (\r\n            <div key={i} className='country-row' onClick={handleSelectCountry(country)} title={`${roundNumber(country.latest)} confirmed cases in ${country.country}`}>\r\n              <img\r\n                src={`https://www.countryflags.io/${country.country_code}/flat/32.png`}\r\n                alt={country.country_code}\r\n              />\r\n              <p>\r\n                <strong>{country.country}</strong>\r\n                <span className='numbers'>{roundNumber(country.latest)}</span>\r\n              </p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    error: state.apiData.error,\r\n    data: state.apiData.data,\r\n    numberOfConfirmed: roundNumber(state.apiData.numberOfConfirmed),\r\n    numberOfDeaths: roundNumber(state.apiData.numberOfDeaths),\r\n    numberOfRecovered: roundNumber(state.apiData.numberOfRecovered),\r\n    numberOfCurrentlySick: roundNumber(state.apiData.numberOfCurrentlySick),\r\n    lastUpdated: state.apiData.lastUpdated,\r\n    lastUpdatedDate: formatDate(state.apiData.lastUpdated),\r\n    lastUpdatedTime: formatTime(state.apiData.lastUpdated),\r\n    countryConfirmedDataSum: state.apiData.countryConfirmedDataSum,\r\n    countryDeathsDataSum: state.apiData.countryDeathsDataSum,\r\n    countryRecoveredDataSum: state.apiData.countryRecoveredDataSum\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getApiData: () => dispatch(getApiDataAction()),\r\n    selectedCountryDispatchToStore: (country) => dispatch(selectedCountryAction(country)),\r\n    getSelectedCountryPopulation: (country_code) => dispatch(getSelectedCountryPopulationAction(country_code))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\r\n","import { GET_API_DATA_REQUEST } from './actionTypes';\r\n\r\nexport const getApiDataAction = () => ({\r\n  type: GET_API_DATA_REQUEST\r\n});\r\n","/* eslint-disable no-unused-vars */\r\nexport const GET_API_DATA_REQUEST = 'GET_API_DATA_REQUEST';\r\nexport const GET_API_DATA_SUCCESS = 'GET_API_DATA_SUCCESS';\r\nexport const GET_API_DATA_ERROR = 'GET_API_DATA_ERROR';\r\nexport const SELECTED_COUNTRY = 'SELECTED_COUNTRY';\r\nexport const GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST = 'GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST';\r\nexport const GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS = 'GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS';\r\nexport const GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR = 'GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR';\r\n","import { SELECTED_COUNTRY } from './actionTypes';\r\n\r\nexport const selectedCountryAction = (country) => ({\r\n  type: SELECTED_COUNTRY,\r\n  selectedCountry: country\r\n});\r\n","import {GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST } from './actionTypes';\r\n\r\nexport const getSelectedCountryPopulationAction = (country_code) => ({\r\n  type: GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST,\r\n  selectedCountryCode: country_code\r\n});\r\n","import React from 'react';\r\n\r\nimport {\r\n  roundNumber,\r\n  calculatePercentage\r\n} from '../../../common';\r\n\r\n\r\nconst CountryInfoCard = (props) => {\r\n  const last24Hours = props.cardText.includes('24h');\r\n\r\n  return (\r\n    <div className='card'>\r\n      {props.cardNumber !== undefined ?\r\n        <p className='country-card-number'>\r\n          {last24Hours ? '+' : null}{roundNumber(props.cardNumber)}\r\n          {props.totalNumber ? \r\n            <span\r\n              className='percentage'\r\n              title={ props.percentageDescription ? `${calculatePercentage(props.totalNumber, props.cardNumber, 2)} of total cases` : null}\r\n            >\r\n              (\r\n              <span className={`${props.cardName}-color`} style={{ margin: '0 2px' }}>\r\n                {last24Hours ? '+' : null}\r\n                {calculatePercentage(props.totalNumber, props.cardNumber, 2)}\r\n              </span>\r\n              )\r\n            </span>\r\n            :\r\n            null\r\n          }\r\n        </p>\r\n        :\r\n        <p className='country-card-number'>no data</p>\r\n      }\r\n      {props.cardText}\r\n      {props.smallText ? \r\n        <>\r\n          <br />\r\n          <small>{props.smallText}</small>\r\n        </>\r\n        :\r\n        null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfoCard;\r\n","import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nconst PieChart = (props) => {\r\n\r\n  const pieData = {\r\n    labels: props.labels,\r\n    datasets: [\r\n      {\r\n        backgroundColor: ['#3333ff', '#571aab', '#4fc974'],\r\n        hoverBackgroundColor: ['#0000cc', '#2d0d59', '#2a8946'],\r\n        data: [\r\n          props.data.currentlySick ? props.data.currentlySick : null,\r\n          props.data.deaths ? props.data.deaths.latest : null,\r\n          props.data.recovered ? props.data.recovered.latest : null\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: props.title,\r\n      fontSize: 20,\r\n      fontColor: '#ccc',\r\n      fontStyle: 'normal'\r\n    },\r\n    legend: {\r\n      display: true,\r\n      position: 'top'\r\n    }\r\n  };\r\n\r\n  const noData = props.data.length === 1 && props.data[0] === 0;\r\n\r\n  return (\r\n    <>\r\n      {!noData ?\r\n        <Pie\r\n          data={pieData}\r\n          width={40}\r\n          height={10}\r\n          options={options}\r\n        /> :\r\n        null\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst LineChart = (props) => {\r\n\r\n  const lineData = {\r\n    labels: props.labels,\r\n    datasets: [\r\n      {\r\n        fill: true,\r\n        lineTension: 0.5,\r\n        backgroundColor: props.backgroundColor,\r\n        borderColor: props.borderColor,\r\n        borderWidth: 2,\r\n        pointRadius: 2,\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: props.borderColor,\r\n        data: props.data\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: props.title,\r\n      fontSize: 25,\r\n      fontColor: '#ccc',\r\n      fontStyle: 'normal'\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    scales: {\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero: true,\r\n          precision: 0\r\n        }\r\n      }]\r\n    }\r\n  };\r\n\r\n  const noData = props.data.length === 1 && props.data[0] === 0;\r\n\r\n  return (\r\n    <>\r\n      {!noData ?\r\n        <Line\r\n          data={lineData}\r\n          width={40}\r\n          height={20}\r\n          options={options}\r\n        /> :\r\n        null\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst BarChart = (props) => {\r\n\r\n  const data = {\r\n    labels: props.labels,\r\n    datasets: [\r\n      {\r\n        backgroundColor: props.backgroundColor,\r\n        borderColor: props.borderColor,\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: props.borderColor,\r\n        hoverBorderColor: props.borderColor,\r\n        data: props.data\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: props.title,\r\n      fontSize: 20,\r\n      fontColor: '#ccc',\r\n      fontStyle: 'normal'\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    scales: {\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero: true,\r\n          precision: 0\r\n        }\r\n      }]\r\n    }\r\n  };\r\n\r\n  const noData = props.data.length === 1 && props.data[0] === 0;\r\n\r\n  return (\r\n    <>\r\n      {!noData ?\r\n        <Bar\r\n          data={data}\r\n          width={40}\r\n          height={20}\r\n          options={options}\r\n        />\r\n        : null\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst Credits = () => {\r\n  return (\r\n    <div id='credits'>\r\n      <a data-tip='custom show' data-event='click focus'>Credits</a>\r\n      <ReactTooltip globalEventOff='click' place='left' type='light' effect='solid' clickable={true}>\r\n        <p>Application made by <a href='https://www.lukazrnic.com' target='_blank' rel='noopener noreferrer'>Luka Zrnic</a></p>\r\n        <p>Source code: <a href='https://github.com/Zrna/coronavirus-stats' target='_blank' rel='noopener noreferrer'>coronavirus-stats</a></p>\r\n        <p>Data source: <a href='https://github.com/ExpDev07/coronavirus-tracker-api' target='_blank' rel='noopener noreferrer'>coronavirus-tracker-api</a></p>\r\n      </ReactTooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Credits;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  roundNumber,\r\n  sortDataByDate,\r\n  substractNumberWithPreviousNumberInArray,\r\n  calculatePercentage\r\n} from '../../common';\r\n\r\nimport CountryInfoCard from './CountryInfoCard';\r\nimport PieChart from './Charts/PieChart';\r\nimport LineChart from './Charts/LineChart';\r\nimport BarChart from './Charts/BarChart';\r\nimport Credits from './Credits';\r\n\r\nimport '../../styles/_style.scss';\r\nimport './style.scss';\r\n\r\nconst MainContent = (props) => {\r\n\r\n  let confirmed,\r\n    deaths,\r\n    recovered,\r\n    currentlySick,\r\n    sortedConfirmedHistoryDates,\r\n    sortedConfirmedHistoryNumbers,\r\n    sortedDeathsHistoryDates,\r\n    sortedDeathsHistoryNumbers,\r\n    sortedRecoveredHistoryDates,\r\n    sortedRecoveredHistoryNumbers,\r\n    newTotalCasesLast24h,\r\n    deathsLast24h,\r\n    recoveredLast24h,\r\n    dailyCases;\r\n\r\n  if (props.country) {\r\n    confirmed = props.data.confirmed.locations.find(country => country.country === props.country);\r\n    deaths = props.data.deaths.locations.find(country => country.country === props.country);\r\n    recovered = props.data.recovered.locations.find(country => country.country === props.country);\r\n\r\n    const sortedConfirmedData = sortDataByDate(confirmed);\r\n    sortedConfirmedHistoryDates = sortedConfirmedData[1];\r\n    sortedConfirmedHistoryNumbers = sortedConfirmedData[2];\r\n\r\n    const sortedDeathsData = sortDataByDate(deaths);\r\n    sortedDeathsHistoryDates = sortedDeathsData[1];\r\n    sortedDeathsHistoryNumbers = sortedDeathsData[2];\r\n\r\n    if (recovered === undefined) {\r\n      recovered = 0;\r\n      sortedRecoveredHistoryDates = ['00/00/00'];\r\n      sortedRecoveredHistoryNumbers = [0];\r\n      currentlySick = confirmed.latest - deaths.latest - 0;\r\n    } else {\r\n      const sortedRecoveredData = sortDataByDate(recovered);\r\n      sortedRecoveredHistoryDates = sortedRecoveredData[1];\r\n      sortedRecoveredHistoryNumbers = sortedRecoveredData[2];\r\n      currentlySick = confirmed.latest - deaths.latest - recovered.latest;\r\n    }\r\n    \r\n    dailyCases = substractNumberWithPreviousNumberInArray(sortedConfirmedHistoryNumbers);\r\n    newTotalCasesLast24h = sortedConfirmedHistoryNumbers[sortedConfirmedHistoryNumbers.length - 1] - sortedConfirmedHistoryNumbers[sortedConfirmedHistoryNumbers.length - 2];\r\n    deathsLast24h = sortedDeathsHistoryNumbers[sortedDeathsHistoryNumbers.length - 1] - sortedDeathsHistoryNumbers[sortedDeathsHistoryNumbers.length - 2];\r\n    recoveredLast24h = sortedRecoveredHistoryNumbers[sortedRecoveredHistoryNumbers.length - 1] - sortedRecoveredHistoryNumbers[sortedRecoveredHistoryNumbers.length - 2];\r\n  }\r\n\r\n  const DefaultMessages = () => {\r\n    if (props.selectedCountry.latest <= 0) {\r\n      return <p className='text-in-center'>No data available</p>;\r\n    }\r\n    \r\n    if (!props.selectedCountry.country) {\r\n      return <p className='text-in-center'>Select country from the country list</p>;\r\n    }\r\n\r\n    if (!props.selectedCountryPopulation) {\r\n      // TODO: some weird error occurs if this isn't here...\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='col main-content' name='main-content'>\r\n      <Credits />\r\n      {props.country ?  \r\n        <>\r\n          {props.selectedCountry.country_code ? \r\n            <img\r\n              style={{ verticalAlign: 'sub', marginRight: '20px' }}\r\n              src={`https://www.countryflags.io/${props.selectedCountry.country_code}/flat/32.png`}\r\n              alt={props.selectedCountry.country_code}\r\n            />\r\n            : null\r\n          }\r\n          <h1 style={{ display: 'inline-block' }}>{props.country}</h1>\r\n        </>\r\n        : null\r\n      }\r\n      {props.selectedCountryPopulation && props.selectedCountry && props.country && props.selectedCountry.latest > 0 ?\r\n        <div className='info'>\r\n          <div className='country-cards'>\r\n            <CountryInfoCard\r\n              cardNumber={confirmed.latest}\r\n              cardText='Total cases'\r\n            />\r\n            <div className='arrow-separator'></div>\r\n            <CountryInfoCard\r\n              cardName='confirmed'\r\n              cardNumber={newTotalCasesLast24h}\r\n              cardText='last 24h'\r\n              totalNumber={confirmed.latest}\r\n              percentageDescription={true}\r\n            />\r\n          </div>\r\n          <div className='country-cards'>\r\n            <CountryInfoCard\r\n              cardName='deaths'\r\n              cardNumber={deaths.latest}\r\n              cardText='Deaths'\r\n              totalNumber={confirmed.latest}\r\n              percentageDescription={true}\r\n            />\r\n            <div className='arrow-separator'></div>\r\n            <CountryInfoCard\r\n              cardName='deaths'\r\n              cardNumber={deathsLast24h}\r\n              cardText='last 24h'\r\n              totalNumber={confirmed.latest}\r\n            />\r\n          </div>\r\n          <div className='country-cards'>\r\n            <CountryInfoCard\r\n              cardName='recovered'\r\n              cardNumber={recovered.latest}\r\n              cardText='Recovered'\r\n              totalNumber={confirmed.latest}\r\n              percentageDescription={true}\r\n            />\r\n            <div className='arrow-separator'></div>\r\n            <CountryInfoCard\r\n              cardName='recovered'\r\n              cardNumber={recoveredLast24h}\r\n              cardText='last 24h'\r\n              totalNumber={confirmed.latest}\r\n            />\r\n          </div>\r\n          <div className='country-cards'>\r\n            <CountryInfoCard\r\n              cardName='currently-sick'\r\n              cardNumber={currentlySick}\r\n              cardText='Currently sick'\r\n              totalNumber={confirmed.latest}\r\n              percentageDescription={true}\r\n            />\r\n          </div>\r\n          <div className='country-cards'>\r\n            <CountryInfoCard\r\n              cardName='country-population'\r\n              cardNumber={props.selectedCountryPopulation}\r\n              cardText='Country population'\r\n            />\r\n            <div className='arrow-separator'></div>\r\n            <CountryInfoCard\r\n              cardName='country-population-percentage'\r\n              cardNumber={calculatePercentage(props.selectedCountryPopulation, confirmed.latest, 3)}\r\n              cardText='population infected'\r\n              smallText='(all cases)'\r\n            />\r\n          </div>\r\n        </div>\r\n        :\r\n        <DefaultMessages />\r\n      }\r\n\r\n      {confirmed && deaths && props.selectedCountry.latest > 0 ?\r\n        <>\r\n          <div>\r\n            <PieChart\r\n              labels={['Currently sick', 'Deaths', 'Recovered']}\r\n              data={{currentlySick, deaths, recovered}}\r\n              title='Total data'\r\n            />\r\n          </div>\r\n\r\n          <div className='row'>\r\n            <div className='col-2'>\r\n              <LineChart\r\n                labels={sortedConfirmedHistoryDates}\r\n                data={sortedConfirmedHistoryNumbers}\r\n                title='Total cases'\r\n                borderColor='#e60036'\r\n                backgroundColor='rgba(230, 0, 54, 0.4)'\r\n              />\r\n            </div>\r\n\r\n            <div className='col-2'>\r\n              <BarChart\r\n                labels={sortedConfirmedHistoryDates}\r\n                data={dailyCases}\r\n                title='New cases per day'\r\n                borderColor='#e60036'\r\n                backgroundColor='rgba(230, 0, 54, 0.4)'\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className='row'>\r\n            <div className='col-2'>\r\n              <LineChart\r\n                labels={sortedDeathsHistoryDates}\r\n                data={sortedDeathsHistoryNumbers}\r\n                title='Total deaths'\r\n                borderColor='#571aab'\r\n                backgroundColor='rgb(87, 26, 171, 0.4)'\r\n              />\r\n            </div>\r\n\r\n            <div className='col-2'>\r\n              <LineChart\r\n                labels={sortedRecoveredHistoryDates}\r\n                data={sortedRecoveredHistoryNumbers}\r\n                title='Total recovered'\r\n                borderColor='#4fc974'\r\n                backgroundColor='rgb(79, 201, 116, 0.4)'\r\n              />\r\n            </div>\r\n          </div>\r\n        </> : null }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    data: state.apiData.data,\r\n    selectedCountry: state.selectedCountry,\r\n    selectedCountryPopulation: state.countryPopulation.selectedCountryPopulation,\r\n    country: state.selectedCountry.country,\r\n    latest: roundNumber(state.selectedCountry.latest)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(MainContent);\r\n","import React from 'react';\r\n\r\nimport Sidebar from './components/Sidebar';\r\nimport MainContent from './components/MainContent';\r\n\r\nimport './styles/_style.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='flex-grid'>\r\n      <Sidebar />\r\n      <MainContent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_API_DATA_SUCCESS, GET_API_DATA_ERROR } from '../actions/actionTypes';\r\n\r\nconst getApiDataReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n  if (action.type === GET_API_DATA_SUCCESS) {\r\n    return {\r\n      ...newState,\r\n      data: action.data[0],\r\n      numberOfConfirmed: action.data[0].latest.confirmed,\r\n      numberOfDeaths: action.data[0].latest.deaths,\r\n      numberOfRecovered: action.data[0].latest.recovered,\r\n      numberOfCurrentlySick: (action.data[0].latest.confirmed - action.data[0].latest.recovered - action.data[0].latest.deaths),\r\n      lastUpdated: action.data[0].confirmed.last_updated,\r\n      countryConfirmedDataSum: action.data[1][0].countryConfirmedDataSum,\r\n      countryDeathsDataSum: action.data[1][0].countryDeathsDataSum,\r\n      countryRecoveredDataSum: action.data[1][0].countryRecoveredDataSum\r\n    };\r\n  } else if (action.type === GET_API_DATA_ERROR) {\r\n    return {\r\n      ...newState,\r\n      error: action.error\r\n    };\r\n  } else {\r\n    return newState;\r\n  }\r\n};\r\n\r\nexport default getApiDataReducer;\r\n","import { SELECTED_COUNTRY } from '../actions/actionTypes';\r\n\r\nconst selectedCountryReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n  if (action.type === SELECTED_COUNTRY) {\r\n    return {\r\n      ...newState,\r\n      country: action.selectedCountry.country,\r\n      country_code: action.selectedCountry.country_code,\r\n      latest: action.selectedCountry.latest\r\n    };\r\n  } else {\r\n    return newState;\r\n  }\r\n};\r\n\r\nexport default selectedCountryReducer;\r\n","import { GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS, GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR } from '../actions/actionTypes';\r\n\r\nconst getSelectedCountryPopulationReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n  if (action.type === GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS) {\r\n    return {\r\n      ...newState,\r\n      selectedCountryPopulation: action.data.country_population\r\n    };\r\n  } else if (action.type === GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR) {\r\n    return {\r\n      ...newState,\r\n      error: action.error\r\n    };\r\n  } else {\r\n    return newState;\r\n  }\r\n};\r\n\r\nexport default getSelectedCountryPopulationReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport getApiDataReducer from './getApiDataReducer';\r\nimport selectedCountryReducer from './selectedCountryReducer';\r\nimport getSelectedCountryPopulationReducer from './getSelectedCountryPopulationReducer';\r\n\r\nexport default combineReducers({\r\n  apiData: getApiDataReducer,\r\n  selectedCountry: selectedCountryReducer,\r\n  countryPopulation: getSelectedCountryPopulationReducer\r\n});\r\n","import { put, takeLatest } from 'redux-saga/effects';\r\nimport { GET_API_DATA_REQUEST, GET_API_DATA_SUCCESS, GET_API_DATA_ERROR } from '../actions/actionTypes';\r\n\r\nfunction getSumData(res, propertyName) {\r\n  let data;\r\n  if (propertyName === 'confirmed') data = res.confirmed.locations;\r\n  if (propertyName === 'deaths') data = res.deaths.locations;\r\n  if (propertyName === 'recovered') data = res.recovered.locations;\r\n  \r\n  const combineDataSum = data.reduce((countries, province) => {\r\n    const existing = countries.find(country => country.country === province.country);\r\n\r\n    if (existing) {\r\n      existing.latest += province.latest;\r\n      existing.province = '';\r\n      Object.keys(existing.history).map((date) => {\r\n        existing.history[date] += province.history[date];\r\n      });\r\n    } else {\r\n      countries.push(province);\r\n    }\r\n    \r\n    return countries;\r\n  }, []);\r\n  \r\n  const sortCombinedData = combineDataSum.sort((a, b) => parseFloat(b.latest) - parseFloat(a.latest));\r\n\r\n  return sortCombinedData;\r\n}\r\n\r\nfunction* getApiData() {\r\n  try {\r\n    const data = yield fetch('https://coronavirus-tracker-api.herokuapp.com/all')\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        console.log('data', res);\r\n\r\n        const countryConfirmedDataSum = getSumData(res, 'confirmed');\r\n        const countryDeathsDataSum = getSumData(res, 'deaths');\r\n        const countryRecoveredDataSum = getSumData(res, 'recovered');\r\n\r\n        const sumData = [{\r\n          countryConfirmedDataSum,\r\n          countryDeathsDataSum,\r\n          countryRecoveredDataSum\r\n        }];\r\n\r\n        return [res, sumData];\r\n      })\r\n      .catch(e => console.log(e));\r\n\r\n    yield put({ type: GET_API_DATA_SUCCESS, data });\r\n  } catch (e) {\r\n    console.log('getApiData saga Error: ', e);\r\n    yield put({ type: GET_API_DATA_ERROR, error: 'Something went wrong while retrieving API data.' });\r\n  }\r\n}\r\n\r\nexport function* getApiDataWatcher() {\r\n  yield takeLatest(GET_API_DATA_REQUEST, getApiData);\r\n}\r\n","import { put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST,\r\n  GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS,\r\n  GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR\r\n} from '../actions/actionTypes';\r\n\r\nfunction* getSelectedCountryPopulationData(action) {\r\n  try {\r\n    const data = yield fetch(`https://coronavirus-tracker-api.herokuapp.com/v2/locations?country_code=${action.selectedCountryCode}`)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        console.log('population data', res.locations[0]);\r\n        return res;\r\n      })\r\n      .catch(e => console.log(e));\r\n\r\n    yield put({ type: GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS, data: data.locations[0] });\r\n  } catch (e) {\r\n    console.log('getApiData saga Error: ', e);\r\n    yield put({ type: GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR, error: 'Something went wrong while retrieving API data.' });\r\n  }\r\n}\r\n\r\nexport function* getSelectedCountryPopulationDataWatcher() {\r\n  yield takeLatest(GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST, getSelectedCountryPopulationData);\r\n}\r\n","import { all, fork } from 'redux-saga/effects';\r\n\r\nimport { getApiDataWatcher } from './getApiDataSaga';\r\nimport { getSelectedCountryPopulationDataWatcher } from './getSelectedCountryPopulationSaga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(getApiDataWatcher),\r\n    fork(getSelectedCountryPopulationDataWatcher)\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from './reducers';\r\nimport rootSaga from './sagas/rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  compose(\r\n    applyMiddleware(sagaMiddleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n      : f => f\r\n  )\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}