{"version":3,"sources":["common/index.js","components/SidebarHeader/Card/index.jsx","components/SidebarHeader/index.jsx","components/CountryList/Country/index.jsx","store/actions/selectedCountryAction.js","store/actions/actionTypes.js","store/actions/getSelectedCountryPopulationAction.js","components/CountryList/index.jsx","containers/Sidebar/index.jsx","components/DefaultMessages/index.jsx","components/Credits/index.jsx","components/CountryInfoHeader/index.jsx","components/CountryInfoCards/Card/index.jsx","components/CountryInfoCards/index.jsx","components/Charts/PieChart/index.jsx","components/Charts/LineChart/index.jsx","components/Charts/BarChart/index.jsx","components/Charts/index.jsx","components/CountryInfo/index.jsx","containers/MainContent/index.jsx","App.js","store/actions/getApiDataAction.js","store/reducers/getApiDataReducer.js","store/reducers/selectedCountryReducer.js","store/reducers/getSelectedCountryPopulationReducer.js","store/reducers/index.js","store/sagas/getApiDataSaga.js","store/sagas/getSelectedCountryPopulationSaga.js","store/sagas/rootSaga.js","store/index.js","index.js","assets/search.svg"],"names":["getMainDataForSelectedCountry","data","property","selectedCountryName","locations","find","country","formatDate","timestamp","undefined","year","slice","day","month","formatTime","hour","minute","second","sortDataByDate","categoryData","sortedData","Object","keys","history","map","key","date","number","sort","a","b","Date","sortedDates","values","sortedNumbers","roundNumber","toString","replace","calculatePercentage","totalValue","partialValue","toFixed","result","parseFloat","calculateLast24HoursData","arrayOfNumbers","length","Card","name","className","connect","apiData","error","numberOfConfirmed","numberOfDeaths","numberOfRecovered","numberOfCurrentlySick","lastUpdatedDate","lastUpdated","lastUpdatedTime","style","color","title","dispatch","selectedCountryDispatchToStore","allData","type","selectedCountry","selectedCountryAction","getSelectedCountryPopulation","country_code","selectedCountryCode","getSelectedCountryPopulationAction","props","onClick","test","navigator","userAgent","scroller","scrollTo","duration","smooth","offset","latest","src","alt","CountryList","countryList","i","countryConfirmedDataSum","useState","setCountryList","searchIcon","placeholder","onChange","e","inputValue","target","value","toLowerCase","filterList","filter","includes","selectedCountryPopulation","countryPopulation","Credits","id","data-tip","data-event","globalEventOff","place","effect","clickable","href","rel","CountryInfoHeader","countryCode","countryName","cardText","cardNumber","cardName","totalNumber","percentageDescription","smallText","last24Hours","margin","selectedCountryConfirmed","confirmed","selectedCountryDeaths","deaths","selectedCountryRecovered","recovered","newCasesLast24h","deathsLast24h","recoveredLast24h","currentlySick","PieChart","pieData","labels","datasets","backgroundColor","hoverBackgroundColor","options","display","text","fontSize","fontColor","fontStyle","legend","position","width","height","LineChart","lineData","fill","lineTension","borderColor","borderWidth","pointRadius","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","scales","yAxes","ticks","beginAtZero","precision","BarChart","hoverBorderColor","dailyCases","sortedConfirmedData","sortedDeathsData","sortedRecoveredData","array","n","CountryInfo","showAt","speed","easing","loading","getApiData","useEffect","getApiDataReducer","state","action","newState","last_updated","countryDeathsDataSum","countryRecoveredDataSum","selectedCountryReducer","getSelectedCountryPopulationReducer","country_population","combineReducers","getApiDataWatcher","getSumData","res","propertyName","reduce","countries","province","existing","push","fetch","then","json","catch","console","log","put","takeLatest","getSelectedCountryPopulationData","getSelectedCountryPopulationDataWatcher","rootSaga","all","fork","sagaMiddleware","createSagaMiddleware","store","createStore","reducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","f","run","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2a363882.chunk.js","sourcesContent":["export const getMainDataForSelectedCountry = (data, property, selectedCountryName) => {\r\n  return data[property].locations.find(country => country.country === selectedCountryName);\r\n};\r\n\r\nexport const formatDate = timestamp => {\r\n  if (timestamp !== undefined) {\r\n    const year = timestamp.slice(0, 4);\r\n    const day = timestamp.slice(5, 7);\r\n    const month = timestamp.slice(8, 10);\r\n\r\n    return `${day}/${month}/${year}`;\r\n  }\r\n};\r\n\r\nexport const formatTime = timestamp => {\r\n  if (timestamp !== undefined) {\r\n    const hour = timestamp.slice(11, 13);\r\n    const minute = timestamp.slice(14, 16);\r\n    const second = timestamp.slice(17, 19);\r\n\r\n    return `${hour}:${minute}:${second}`;\r\n  }\r\n};\r\n\r\nexport const sortDataByDate = (categoryData) => {\r\n  let sortedData = Object.keys(categoryData.history).map(key => ({date: key, number: categoryData.history[key]}));\r\n  sortedData = sortedData.sort((a,b)=> new Date(a.date) - new Date(b.date));\r\n  sortedData = Object.values(sortedData);\r\n\r\n  const sortedDates = sortedData.map(a => a.date);\r\n  const sortedNumbers = sortedData.map(a => a.number);\r\n\r\n  return [categoryData, sortedDates, sortedNumbers];\r\n};\r\n\r\nexport const roundNumber = (number) => {\r\n  if (number !== undefined && number !== null) return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n};\r\n\r\nexport const calculatePercentage = (totalValue, partialValue, toFixed = 2) => {\r\n  const result = ((100 * partialValue) / totalValue).toFixed(toFixed);\r\n\r\n  return parseFloat(result);\r\n};\r\n\r\nexport const substractNumberWithPreviousNumberInArray = array => {\r\n  return array.map((n, i) => {\r\n    const itertator = i - 1;\r\n    return n - array[itertator];\r\n  });\r\n};\r\n\r\nexport const calculateLast24HoursData = (arrayOfNumbers) => {\r\n  return arrayOfNumbers[arrayOfNumbers.length - 1] - arrayOfNumbers[arrayOfNumbers.length - 2];\r\n};\r\n","import React from 'react';\r\n\r\nconst Card = ({ name, number }) => {\r\n  return (\r\n    <p className={`card ${name}`}>\r\n      <span>{number ? number : 'no data'}</span> {name.replace('-', ' ')}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './styles.scss';\r\n\r\nimport {\r\n  roundNumber,\r\n  formatDate,\r\n  formatTime\r\n} from '../../common';\r\n\r\nimport Card from './Card';\r\n\r\nconst Header = ({ error, numberOfConfirmed, numberOfDeaths, numberOfRecovered, numberOfCurrentlySick, lastUpdatedDate, lastUpdatedTime }) => {\r\n  return (\r\n    <div className='sum-data'>\r\n      <h2>Corona Virus Statistics</h2>\r\n      {error ? <p style={{ color: '#e60036' }}>{error}</p> : null}\r\n      <div className='cards-row'>\r\n        <Card name='confirmed' number={numberOfConfirmed} />\r\n        <Card name='deaths' number={numberOfDeaths} />\r\n      </div>\r\n      <div className='cards-row'>\r\n        <Card name='recovered' number={numberOfRecovered} />\r\n        <Card name='currently-sick' number={numberOfCurrentlySick} />\r\n      </div>\r\n      {lastUpdatedDate && lastUpdatedTime ?\r\n        <p>\r\n          Last update\r\n          <span title='DD/MM/YYYY'> {lastUpdatedDate} </span>\r\n          in\r\n          <span title='HH/MM/SS'> {lastUpdatedTime}</span>.\r\n        </p>\r\n        :\r\n        null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ apiData }) => ({\r\n  error: apiData.error,\r\n  numberOfConfirmed: roundNumber(apiData.numberOfConfirmed),\r\n  numberOfDeaths: roundNumber(apiData.numberOfDeaths),\r\n  numberOfRecovered: roundNumber(apiData.numberOfRecovered),\r\n  numberOfCurrentlySick: roundNumber(apiData.numberOfCurrentlySick),\r\n  lastUpdatedDate: formatDate(apiData.lastUpdated),\r\n  lastUpdatedTime: formatTime(apiData.lastUpdated),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { scroller } from 'react-scroll';\r\n\r\nimport {\r\n  selectedCountryAction,\r\n  getSelectedCountryPopulationAction\r\n} from '../../../store/actions';\r\nimport { roundNumber } from '../../../common';\r\n\r\nconst Country = ({ data, country, ...props }) => {\r\n  \r\n  const handleSelectCountry = (selectedCountry) => () => {\r\n    props.selectedCountryDispatchToStore(data, selectedCountry);\r\n    props.getSelectedCountryPopulation(selectedCountry.country_code);\r\n\r\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {\r\n      scroller.scrollTo('main-content', {\r\n        duration: 1000,\r\n        smooth: true,\r\n        offset: 50\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className='country-row'\r\n      onClick={handleSelectCountry(country)}\r\n      title={`${roundNumber(country.latest)} confirmed cases in ${country.country}`}\r\n    >\r\n      <img\r\n        src={`https://www.countryflags.io/${country.country_code}/flat/32.png`}\r\n        alt={country.country_code}\r\n      />\r\n      <p>\r\n        <strong>{country.country}</strong>\r\n        <span className='numbers'>{roundNumber(country.latest)}</span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ apiData: { data }}) => ({\r\n  data\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  selectedCountryDispatchToStore: (data, country) => dispatch(selectedCountryAction(data, country)),\r\n  getSelectedCountryPopulation: (country_code) => dispatch(getSelectedCountryPopulationAction(country_code))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Country);\r\n","import { SELECTED_COUNTRY } from './actionTypes';\r\n\r\nexport const selectedCountryAction = (allData, country) => ({\r\n  type: SELECTED_COUNTRY,\r\n  selectedCountry: {allData, country}\r\n});\r\n","export const GET_API_DATA_REQUEST = 'GET_API_DATA_REQUEST';\r\nexport const GET_API_DATA_SUCCESS = 'GET_API_DATA_SUCCESS';\r\nexport const GET_API_DATA_ERROR = 'GET_API_DATA_ERROR';\r\n\r\nexport const SELECTED_COUNTRY = 'SELECTED_COUNTRY';\r\n\r\nexport const GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST = 'GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST';\r\nexport const GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS = 'GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS';\r\nexport const GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR = 'GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR';\r\n","import {GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST } from './actionTypes';\r\n\r\nexport const getSelectedCountryPopulationAction = (country_code) => ({\r\n  type: GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST,\r\n  selectedCountryCode: country_code\r\n});\r\n","import React from 'react';\r\n\r\nimport './styles.scss';\r\n\r\nimport Country from './Country';\r\n\r\nconst CountryList = ({ countryList }) => {\r\n  return (\r\n    <div className='country-list'>\r\n      {\r\n        countryList && countryList.map((country, i) => (\r\n          <Country key={i} country={country} />\r\n        ))\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryList;\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport '../../styles/_style.scss';\r\nimport './style.scss';\r\n\r\nimport searchIcon from '../../assets/search.svg';\r\n\r\nimport Header from '../../components/SidebarHeader';\r\nimport CountryList from '../../components/CountryList';\r\n\r\nconst Sidebar = ({ countryConfirmedDataSum }) => {\r\n  const [countryList, setCountryList] = useState(countryConfirmedDataSum);\r\n\r\n  const handleInputSearch = (e) => {\r\n    const inputValue = e.target.value.toLowerCase();\r\n    const filterList = countryConfirmedDataSum.filter(country => (\r\n      country.country.toLowerCase().includes(inputValue)\r\n    ));\r\n    setCountryList(filterList);\r\n  };\r\n\r\n  return (\r\n    <div className='col sidebar'>\r\n      <Header />\r\n      <div className='input-search'>\r\n        <img src={searchIcon} alt='Search icon' />\r\n        <input type='search' placeholder='Search country by name' onChange={handleInputSearch} />\r\n      </div>\r\n      <CountryList countryList={countryList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ apiData: { countryConfirmedDataSum } }) => {\r\n  return {\r\n    countryConfirmedDataSum\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(Sidebar);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst DefaultMessages = ({ selectedCountryPopulation, selectedCountry: { latest, country } }) => {\r\n  if (latest <= 0) {\r\n    return <p className='text-in-center'>No data available</p>;\r\n  }\r\n  \r\n  if (!country) {\r\n    return <p className='text-in-center'>Select country from the country list</p>;\r\n  }\r\n\r\n  if (!selectedCountryPopulation) {\r\n    return 'No Data';\r\n  }\r\n};\r\n\r\nconst mapStateToProps = ({selectedCountry, countryPopulation: { selectedCountryPopulation } }) => ({\r\n  selectedCountry,\r\n  selectedCountryPopulation\r\n});\r\n\r\nexport default connect(mapStateToProps)(DefaultMessages);\r\n","import React from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport './styles.scss';\r\n\r\nconst Credits = () => {\r\n  return (\r\n    <div id='credits'>\r\n      <p data-tip='custom show' data-event='click focus'>Credits</p>\r\n      <ReactTooltip globalEventOff='click' place='left' type='light' effect='solid' clickable={true}>\r\n        <p>Application made by <a href='https://www.lukazrnic.com' target='_blank' rel='noopener noreferrer'>Luka Zrnic</a></p>\r\n        <p>Source code: <a href='https://github.com/Zrna/coronavirus-stats' target='_blank' rel='noopener noreferrer'>coronavirus-stats</a></p>\r\n        <p>Data source: <a href='https://github.com/ExpDev07/coronavirus-tracker-api' target='_blank' rel='noopener noreferrer'>coronavirus-tracker-api</a></p>\r\n      </ReactTooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Credits;\r\n","import React from 'react';\r\n\r\nimport './styles.scss';\r\n\r\nconst CountryInfoHeader = ({ countryCode, countryName }) => {\r\n  return (\r\n    <div className='country-info-header'>\r\n      {countryCode ? \r\n        <img\r\n          src={`https://www.countryflags.io/${countryCode}/flat/32.png`}\r\n          alt={countryCode}\r\n        />\r\n        : null\r\n      }\r\n      <h1>{countryName}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryInfoHeader;\r\n","import React from 'react';\r\n\r\nimport {\r\n  roundNumber,\r\n  calculatePercentage\r\n} from '../../../common';\r\n\r\nconst Card = ({ cardText, cardNumber, cardName, totalNumber, percentageDescription, smallText }) => {\r\n  const last24Hours = cardText.includes('24h');\r\n\r\n  const CardNumberWithSymbol = () => {\r\n    if (cardText === 'population infected') return `${roundNumber(cardNumber)}%`; // '%' at the end of the string\r\n    if (last24Hours) return `+${roundNumber(cardNumber)}`; // '+' at the beginning of the string\r\n\r\n    return roundNumber(cardNumber);\r\n  };\r\n\r\n  return (\r\n    <div className='card'>\r\n      {cardNumber >= 0 ?\r\n        <p className='country-card-number'>\r\n          <CardNumberWithSymbol />\r\n          {totalNumber ? \r\n            <span\r\n              className='percentage'\r\n              title={ percentageDescription ? `${calculatePercentage(totalNumber, cardNumber)}% of total cases` : null}\r\n            >\r\n              (\r\n              <span className={`${cardName}-color`} style={{ margin: '0 2px' }}>\r\n                {last24Hours ? '+' : null}\r\n                {calculatePercentage(totalNumber, cardNumber)}%\r\n              </span>\r\n              )\r\n            </span>\r\n            :\r\n            null\r\n          }\r\n        </p>\r\n        :\r\n        <p className='country-card-number'>no data</p>\r\n      }\r\n      <span>{cardText}</span>\r\n      {smallText ? \r\n        <>\r\n          <br />\r\n          <small>{smallText}</small>\r\n        </>\r\n        :\r\n        null\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './styles.scss';\r\n\r\nimport { calculatePercentage } from '../../common';\r\n\r\nimport Card from './Card';\r\n\r\nconst CountryInfoCards = (props) => {\r\n  return (\r\n    <div className='info'>\r\n      <div className='country-cards'>\r\n        <Card\r\n          cardNumber={props.selectedCountryConfirmed.latest}\r\n          cardText='Total cases'\r\n        />\r\n        <div className='arrow-separator'></div>\r\n        <Card\r\n          cardName='confirmed'\r\n          cardNumber={props.newCasesLast24h}\r\n          cardText='last 24h'\r\n          totalNumber={props.selectedCountryConfirmed.latest}\r\n          percentageDescription={true}\r\n        />\r\n      </div>\r\n      <div className='country-cards'>\r\n        <Card\r\n          cardName='deaths'\r\n          cardNumber={props.selectedCountryDeaths.latest}\r\n          cardText='Deaths'\r\n          totalNumber={props.selectedCountryConfirmed.latest}\r\n          percentageDescription={true}\r\n        />\r\n        <div className='arrow-separator'></div>\r\n        <Card\r\n          cardName='deaths'\r\n          cardNumber={props.deathsLast24h}\r\n          cardText='last 24h'\r\n          totalNumber={props.selectedCountryConfirmed.latest}\r\n        />\r\n      </div>\r\n      <div className='country-cards'>\r\n        <Card\r\n          cardName='recovered'\r\n          cardNumber={props.selectedCountryRecovered.latest}\r\n          cardText='Recovered'\r\n          totalNumber={props.selectedCountryConfirmed.latest}\r\n          percentageDescription={true}\r\n        />\r\n        <div className='arrow-separator'></div>\r\n        <Card\r\n          cardName='recovered'\r\n          cardNumber={props.recoveredLast24h}\r\n          cardText='last 24h'\r\n          totalNumber={props.selectedCountryConfirmed.latest}\r\n        />\r\n      </div>\r\n      <div className='country-cards'>\r\n        <Card\r\n          cardName='currently-sick'\r\n          cardNumber={props.currentlySick}\r\n          cardText='Currently sick'\r\n          totalNumber={props.selectedCountryConfirmed.latest}\r\n          percentageDescription={true}\r\n        />\r\n      </div>\r\n      <div className='country-cards'>\r\n        <Card\r\n          cardName='country-population'\r\n          cardNumber={props.selectedCountryPopulation}\r\n          cardText='Country population'\r\n        />\r\n        <div className='arrow-separator'></div>\r\n        <Card\r\n          cardName='country-population-percentage'\r\n          cardNumber={calculatePercentage(props.selectedCountryPopulation, props.selectedCountryConfirmed.latest, 3)}\r\n          cardText='population infected'\r\n          smallText='(all cases)'\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ selectedCountry, countryPopulation: { selectedCountryPopulation }}) => ({\r\n  selectedCountryConfirmed: selectedCountry.confirmed,\r\n  selectedCountryDeaths: selectedCountry.deaths,\r\n  selectedCountryRecovered: selectedCountry.recovered,\r\n  selectedCountryPopulation\r\n});\r\n\r\nexport default connect(mapStateToProps)(CountryInfoCards);\r\n","import React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\n\r\nconst PieChart = (props) => {\r\n\r\n  const pieData = {\r\n    labels: props.labels,\r\n    datasets: [\r\n      {\r\n        backgroundColor: ['#3333ff', '#571aab', '#4fc974'],\r\n        hoverBackgroundColor: ['#0000cc', '#2d0d59', '#2a8946'],\r\n        data: [\r\n          props.data.currentlySick ? props.data.currentlySick : null,\r\n          props.data.deaths ? props.data.deaths.latest : null,\r\n          props.data.recovered ? props.data.recovered.latest : null\r\n        ]\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: props.title,\r\n      fontSize: 20,\r\n      fontColor: '#ccc',\r\n      fontStyle: 'normal'\r\n    },\r\n    legend: {\r\n      display: true,\r\n      position: 'top'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Pie\r\n      data={pieData}\r\n      width={40}\r\n      height={10}\r\n      options={options}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PieChart;\r\n","import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst LineChart = (props) => {\r\n\r\n  const lineData = {\r\n    labels: props.labels,\r\n    datasets: [\r\n      {\r\n        fill: true,\r\n        lineTension: 0.5,\r\n        backgroundColor: props.backgroundColor,\r\n        borderColor: props.borderColor,\r\n        borderWidth: 2,\r\n        pointRadius: 2,\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: props.borderColor,\r\n        data: props.data\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: props.title,\r\n      fontSize: 25,\r\n      fontColor: '#ccc',\r\n      fontStyle: 'normal'\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    scales: {\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero: true,\r\n          precision: 0\r\n        }\r\n      }]\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Line\r\n      data={lineData}\r\n      width={40}\r\n      height={20}\r\n      options={options}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LineChart;\r\n","import React from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst BarChart = (props) => {\r\n\r\n  const data = {\r\n    labels: props.labels,\r\n    datasets: [\r\n      {\r\n        backgroundColor: props.backgroundColor,\r\n        borderColor: props.borderColor,\r\n        borderWidth: 1,\r\n        hoverBackgroundColor: props.borderColor,\r\n        hoverBorderColor: props.borderColor,\r\n        data: props.data\r\n      }\r\n    ]\r\n  };\r\n\r\n  const options = {\r\n    title: {\r\n      display: true,\r\n      text: props.title,\r\n      fontSize: 20,\r\n      fontColor: '#ccc',\r\n      fontStyle: 'normal'\r\n    },\r\n    legend: {\r\n      display: false\r\n    },\r\n    scales: {\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero: true,\r\n          precision: 0\r\n        }\r\n      }]\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Bar\r\n      data={data}\r\n      width={40}\r\n      height={20}\r\n      options={options}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport PieChart from './PieChart';\r\nimport LineChart from './LineChart';\r\nimport BarChart from './BarChart';\r\n\r\nconst Charts = ({ currentlySick, dailyCases, sortedConfirmedData, sortedDeathsData, sortedRecoveredData, deaths, recovered }) => {\r\n  return (\r\n    <>\r\n      {\r\n        currentlySick && deaths && recovered ?\r\n          <div>\r\n            <PieChart\r\n              labels={['Currently sick', 'Deaths', 'Recovered']}\r\n              data={{currentlySick, deaths, recovered}}\r\n              title='Total data'\r\n            />\r\n          </div>\r\n          :\r\n          null\r\n      }\r\n\r\n      <div className='row'>\r\n        {\r\n          sortedConfirmedData ?\r\n            <div className='col-2'>\r\n              <LineChart\r\n                labels={sortedConfirmedData[1]}\r\n                data={sortedConfirmedData[2]}\r\n                title='Total cases'\r\n                borderColor='#e60036'\r\n                backgroundColor='rgba(230, 0, 54, 0.4)'\r\n              />\r\n            </div>\r\n            :\r\n            null\r\n        }\r\n        {\r\n          sortedConfirmedData && dailyCases ?\r\n            <div className='col-2'>\r\n              <BarChart\r\n                labels={sortedConfirmedData[1]}\r\n                data={dailyCases}\r\n                title='New cases per day'\r\n                borderColor='#e60036'\r\n                backgroundColor='rgba(230, 0, 54, 0.4)'\r\n              />\r\n            </div>\r\n            :\r\n            null\r\n        }\r\n      </div>\r\n\r\n      <div className='row'>\r\n        {\r\n          sortedDeathsData ?\r\n            <div className='col-2'>\r\n              <LineChart\r\n                labels={sortedDeathsData[1]}\r\n                data={sortedDeathsData[2]}\r\n                title='Total deaths'\r\n                borderColor='#571aab'\r\n                backgroundColor='rgb(87, 26, 171, 0.4)'\r\n              />\r\n            </div>\r\n            :\r\n            null\r\n        }\r\n\r\n        {\r\n          sortedRecoveredData ?\r\n            <div className='col-2'>\r\n              <LineChart\r\n                labels={sortedRecoveredData[1]}\r\n                data={sortedRecoveredData[2]}\r\n                title='Total recovered'\r\n                borderColor='#4fc974'\r\n                backgroundColor='rgb(79, 201, 116, 0.4)'\r\n              />\r\n            </div>\r\n            :\r\n            null\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ selectedCountry: { deaths, recovered } }) => ({\r\n  deaths,\r\n  recovered\r\n});\r\n\r\nexport default connect(mapStateToProps)(Charts);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  sortDataByDate,\r\n  substractNumberWithPreviousNumberInArray,\r\n  calculateLast24HoursData\r\n} from '../../common';\r\n\r\nimport Credits from '../Credits';\r\nimport CountryInfoHeader from '../CountryInfoHeader';\r\nimport CountryInfoCards from '../CountryInfoCards';\r\nimport Charts from '../Charts';\r\n\r\nconst MainContent = ({ selectedCountryName, selectedCountryCode, selectedCountryConfirmed, selectedCountryDeaths, selectedCountryRecovered }) => {\r\n  const sortedConfirmedData = sortDataByDate(selectedCountryConfirmed);\r\n  const sortedDeathsData = sortDataByDate(selectedCountryDeaths);\r\n  const sortedRecoveredData = sortDataByDate(selectedCountryRecovered);\r\n  \r\n  const currentlySick = selectedCountryConfirmed.latest - selectedCountryDeaths.latest - selectedCountryRecovered.latest;\r\n  const dailyCases = substractNumberWithPreviousNumberInArray(sortedConfirmedData[2]);\r\n\r\n  const newCasesLast24h = calculateLast24HoursData(sortedConfirmedData[2]);\r\n  const deathsLast24h = calculateLast24HoursData(sortedDeathsData[2]);\r\n  const recoveredLast24h = calculateLast24HoursData(sortedRecoveredData[2]);\r\n\r\n  return (\r\n    <>\r\n      <Credits />\r\n      <CountryInfoHeader\r\n        countryCode={selectedCountryCode}\r\n        countryName={selectedCountryName}\r\n      />      \r\n      <CountryInfoCards\r\n        newCasesLast24h={newCasesLast24h}\r\n        deathsLast24h={deathsLast24h}\r\n        recoveredLast24h={recoveredLast24h}\r\n        currentlySick={currentlySick}\r\n      />\r\n      <Charts\r\n        currentlySick={currentlySick}\r\n        dailyCases={dailyCases}\r\n        sortedConfirmedData={sortedConfirmedData}\r\n        sortedDeathsData={sortedDeathsData}\r\n        sortedRecoveredData={sortedRecoveredData}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ selectedCountry: { country, confirmed, deaths, recovered } }) => ({\r\n  selectedCountryName: country.country,\r\n  selectedCountryCode: country.country_code,\r\n  selectedCountryConfirmed: confirmed,\r\n  selectedCountryDeaths: deaths,\r\n  selectedCountryRecovered: recovered,\r\n});\r\n\r\nexport default connect(mapStateToProps)(MainContent);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport BackToTop from 'react-back-to-top-button';\r\n\r\nimport '../../styles/_style.scss';\r\nimport './styles.scss';\r\n\r\nimport DefaultMessages from '../../components/DefaultMessages';\r\nimport CountryInfo from '../../components/CountryInfo';\r\n\r\nconst MainContent = ({ country }) => {\r\n  return (\r\n    <div className='col main-content' name='main-content'>\r\n      { country ? <CountryInfo /> : <DefaultMessages /> }\r\n\r\n      <BackToTop\r\n        className='back-to-top'\r\n        showAt={200}\r\n        speed={1500}\r\n        easing='easeOutSine'\r\n      >\r\n        <span>↑ go to top</span>\r\n      </BackToTop>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ selectedCountry: { country } }) => ({\r\n  country\r\n});\r\n\r\nexport default connect(mapStateToProps)(MainContent);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport { getApiDataAction } from './store/actions';\r\nimport Sidebar from './containers/Sidebar';\r\nimport MainContent from './containers/MainContent';\r\n\r\nimport './styles/_style.scss';\r\n\r\nfunction App({ getApiData, error, loading }) {\r\n\r\n  useEffect(() => {\r\n    getApiData();\r\n  }, [getApiData]);\r\n\r\n\r\n  const Content = () => {\r\n    if (error) {\r\n      return <p className='text-in-center' style={{ fontSize: '20px' }}>{error}</p>;\r\n    } else {\r\n      return (\r\n        <>\r\n          <Sidebar />\r\n          <MainContent />\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='flex-grid'>\r\n      {\r\n        loading ?\r\n          <Loader\r\n            className='loader-center'\r\n            type='Oval'\r\n            color='#eee'\r\n            height={100}\r\n            width={100}\r\n          />\r\n          :\r\n          <Content />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ apiData: { loading, error } }) => ({\r\n  loading,\r\n  error\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getApiData: () => dispatch(getApiDataAction())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { GET_API_DATA_REQUEST } from './actionTypes';\r\n\r\nexport const getApiDataAction = () => ({\r\n  type: GET_API_DATA_REQUEST\r\n});\r\n","import {\r\n  GET_API_DATA_SUCCESS,\r\n  GET_API_DATA_ERROR\r\n} from '../actions/actionTypes';\r\n\r\nconst getApiDataReducer = (state = { loading: true }, action) => {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case GET_API_DATA_SUCCESS:\r\n      return {\r\n        ...newState,\r\n        loading: false,\r\n        data: action.data[0],\r\n        numberOfConfirmed: action.data[0].latest.confirmed,\r\n        numberOfDeaths: action.data[0].latest.deaths,\r\n        numberOfRecovered: action.data[0].latest.recovered,\r\n        numberOfCurrentlySick: (action.data[0].latest.confirmed - action.data[0].latest.recovered - action.data[0].latest.deaths),\r\n        lastUpdated: action.data[0].confirmed.last_updated,\r\n        countryConfirmedDataSum: action.data[1][0].countryConfirmedDataSum,\r\n        countryDeathsDataSum: action.data[1][0].countryDeathsDataSum,\r\n        countryRecoveredDataSum: action.data[1][0].countryRecoveredDataSum\r\n      };\r\n    case GET_API_DATA_ERROR:\r\n      return {\r\n        ...newState,\r\n        loading: false,\r\n        error: action.error\r\n      };\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default getApiDataReducer;\r\n","import { SELECTED_COUNTRY } from '../actions/actionTypes';\r\n\r\nimport { getMainDataForSelectedCountry } from '../../common';\r\n\r\nconst selectedCountryReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case SELECTED_COUNTRY:\r\n      return {\r\n        ...newState,\r\n        country: action.selectedCountry.country,\r\n        confirmed: getMainDataForSelectedCountry(action.selectedCountry.allData, 'confirmed', action.selectedCountry.country.country),\r\n        deaths: getMainDataForSelectedCountry(action.selectedCountry.allData, 'deaths', action.selectedCountry.country.country),\r\n        recovered: getMainDataForSelectedCountry(action.selectedCountry.allData, 'recovered', action.selectedCountry.country.country)\r\n      };\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default selectedCountryReducer;\r\n","import {\r\n  GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS,\r\n  GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR\r\n} from '../actions/actionTypes';\r\n\r\nconst getSelectedCountryPopulationReducer = (state = {}, action) => {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS:\r\n      return {\r\n        ...newState,\r\n        selectedCountryPopulation: action.data.country_population\r\n      };\r\n    case GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR:\r\n      return {\r\n        ...newState,\r\n        error: action.error\r\n      };\r\n    default:\r\n      return newState;\r\n  }\r\n};\r\n\r\nexport default getSelectedCountryPopulationReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport getApiDataReducer from './getApiDataReducer';\r\nimport selectedCountryReducer from './selectedCountryReducer';\r\nimport getSelectedCountryPopulationReducer from './getSelectedCountryPopulationReducer';\r\n\r\nexport default combineReducers({\r\n  apiData: getApiDataReducer,\r\n  selectedCountry: selectedCountryReducer,\r\n  countryPopulation: getSelectedCountryPopulationReducer\r\n});\r\n","import { put, takeLatest } from 'redux-saga/effects';\r\nimport { GET_API_DATA_REQUEST, GET_API_DATA_SUCCESS, GET_API_DATA_ERROR } from '../actions/actionTypes';\r\n\r\nfunction getSumData(res, propertyName) {\r\n  const data = res[propertyName].locations;\r\n  \r\n  const combineDataSum = data.reduce((countries, province) => {\r\n    const existing = countries.find(country => country.country === province.country);\r\n\r\n    if (existing) {\r\n      existing.latest += province.latest;\r\n      existing.province = '';\r\n      Object.keys(existing.history).map((date) => {\r\n        return existing.history[date] += province.history[date];\r\n      });\r\n    } else {\r\n      countries.push(province);\r\n    }\r\n    \r\n    return countries;\r\n  }, []);\r\n  \r\n  const sortCombinedData = combineDataSum.sort((a, b) => parseFloat(b.latest) - parseFloat(a.latest));\r\n\r\n  return sortCombinedData;\r\n}\r\n\r\nfunction* getApiData() {\r\n  try {\r\n    const data = yield fetch('https://coronavirus-tracker-api.herokuapp.com/all')\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        const countryConfirmedDataSum = getSumData(res, 'confirmed');\r\n        const countryDeathsDataSum = getSumData(res, 'deaths');\r\n        const countryRecoveredDataSum = getSumData(res, 'recovered');\r\n\r\n        const sumData = [{\r\n          countryConfirmedDataSum,\r\n          countryDeathsDataSum,\r\n          countryRecoveredDataSum\r\n        }];\r\n\r\n        return [res, sumData];\r\n      })\r\n      .catch(e => console.log(e));\r\n\r\n    yield put({ type: GET_API_DATA_SUCCESS, data });\r\n  } catch (e) {\r\n    console.log('getApiData saga Error: ', e);\r\n    yield put({ type: GET_API_DATA_ERROR, error: 'Something went wrong while retrieving API data. Try again.' });\r\n  }\r\n}\r\n\r\nexport function* getApiDataWatcher() {\r\n  yield takeLatest(GET_API_DATA_REQUEST, getApiData);\r\n}\r\n","import { put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n  GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST,\r\n  GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS,\r\n  GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR\r\n} from '../actions/actionTypes';\r\n\r\nfunction* getSelectedCountryPopulationData(action) {\r\n  try {\r\n    const data = yield fetch(`https://coronavirus-tracker-api.herokuapp.com/v2/locations?country_code=${action.selectedCountryCode}`)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        return res;\r\n      })\r\n      .catch(e => console.log(e));\r\n\r\n    yield put({ type: GET_SELECTED_COUNTRY_POPULATION_DATA_SUCCESS, data: data.locations[0] });\r\n  } catch (e) {\r\n    console.log('getApiData saga Error: ', e);\r\n    yield put({ type: GET_SELECTED_COUNTRY_POPULATION_DATA_ERROR, error: 'Something went wrong while retrieving API data.' });\r\n  }\r\n}\r\n\r\nexport function* getSelectedCountryPopulationDataWatcher() {\r\n  yield takeLatest(GET_SELECTED_COUNTRY_POPULATION_DATA_REQUEST, getSelectedCountryPopulationData);\r\n}\r\n","import { all, fork } from 'redux-saga/effects';\r\n\r\nimport { getApiDataWatcher } from './getApiDataSaga';\r\nimport { getSelectedCountryPopulationDataWatcher } from './getSelectedCountryPopulationSaga';\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    fork(getApiDataWatcher),\r\n    fork(getSelectedCountryPopulationDataWatcher)\r\n  ]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducer from './reducers';\r\nimport rootSaga from './sagas/rootSaga';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  compose(\r\n    applyMiddleware(sagaMiddleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n      : f => f\r\n  )\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport './index.scss';\r\n\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/search.19184702.svg\";"],"sourceRoot":""}